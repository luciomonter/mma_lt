<<<<<<< HEAD
{"version":3,"sources":["../../src/addon/mod/forum/pages/discussion/discussion.module.ts","../../src/addon/mod/forum/pages/discussion/discussion.ts"],"names":[],"mappings":"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","file":"82.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CoreComponentsModule } from '@components/components.module';\r\nimport { CoreDirectivesModule } from '@directives/directives.module';\r\nimport { AddonModForumComponentsModule } from '../../components/components.module';\r\nimport { AddonModForumDiscussionPage } from './discussion';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModForumDiscussionPage,\r\n    ],\r\n    imports: [\r\n        CoreComponentsModule,\r\n        CoreDirectivesModule,\r\n        AddonModForumComponentsModule,\r\n        IonicPageModule.forChild(AddonModForumDiscussionPage),\r\n        TranslateModule.forChild()\r\n    ],\r\n})\r\nexport class AddonModForumDiscussionPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/forum/pages/discussion/discussion.module.ts","// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, Optional, OnDestroy, ViewChild, NgZone } from '@angular/core';\r\nimport { IonicPage, NavParams, Content } from 'ionic-angular';\r\nimport { Network } from '@ionic-native/network';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CoreAppProvider } from '@providers/app';\r\nimport { CoreEventsProvider } from '@providers/events';\r\nimport { CoreSitesProvider } from '@providers/sites';\r\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\r\nimport { CoreUtilsProvider } from '@providers/utils/utils';\r\nimport { CoreFileUploaderProvider } from '@core/fileuploader/providers/fileuploader';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { AddonModForumProvider } from '../../providers/forum';\r\nimport { AddonModForumOfflineProvider } from '../../providers/offline';\r\nimport { AddonModForumHelperProvider } from '../../providers/helper';\r\nimport { AddonModForumSyncProvider } from '../../providers/sync';\r\n\r\ntype SortType = 'flat-newest' | 'flat-oldest' | 'nested';\r\n\r\n/**\r\n * Page that displays a forum discussion.\r\n */\r\n@IonicPage({ segment: 'addon-mod-forum-discussion' })\r\n@Component({\r\n    selector: 'page-addon-mod-forum-discussion',\r\n    templateUrl: 'discussion.html',\r\n})\r\nexport class AddonModForumDiscussionPage implements OnDestroy {\r\n    @ViewChild(Content) content: Content;\r\n\r\n    courseId: number;\r\n    discussionId: number;\r\n    forum: any;\r\n    discussion: any;\r\n    posts: any[];\r\n    discussionLoaded = false;\r\n    defaultSubject: string;\r\n    isOnline: boolean;\r\n    isSplitViewOn: boolean;\r\n    locked: boolean;\r\n    postHasOffline: boolean;\r\n    sort: SortType = 'flat-oldest';\r\n    trackPosts: boolean;\r\n    replyData = {\r\n        replyingTo: 0,\r\n        isEditing: false,\r\n        subject: '',\r\n        message: null, // Null means empty or just white space.\r\n        files: [],\r\n    };\r\n    originalData = {\r\n        subject: null, // Null means original data is not set.\r\n        message: null, // Null means empty or just white space.\r\n        files: [],\r\n    };\r\n    refreshIcon = 'spinner';\r\n    syncIcon = 'spinner';\r\n    discussionStr = '';\r\n    component = AddonModForumProvider.COMPONENT;\r\n    cmId: number;\r\n\r\n    protected forumId: number;\r\n    protected onlineObserver: any;\r\n    protected syncObserver: any;\r\n    protected syncManualObserver: any;\r\n\r\n    constructor(navParams: NavParams,\r\n            network: Network,\r\n            zone: NgZone,\r\n            private appProvider: CoreAppProvider,\r\n            private eventsProvider: CoreEventsProvider,\r\n            private sitesProvider: CoreSitesProvider,\r\n            private domUtils: CoreDomUtilsProvider,\r\n            private utils: CoreUtilsProvider,\r\n            private translate: TranslateService,\r\n            private uploaderProvider: CoreFileUploaderProvider,\r\n            private forumProvider: AddonModForumProvider,\r\n            private forumOffline: AddonModForumOfflineProvider,\r\n            private forumHelper: AddonModForumHelperProvider,\r\n            private forumSync: AddonModForumSyncProvider,\r\n            @Optional() private svComponent: CoreSplitViewComponent) {\r\n        this.courseId = navParams.get('courseId');\r\n        this.cmId = navParams.get('cmId');\r\n        this.forumId = navParams.get('forumId');\r\n        this.discussionId = navParams.get('discussionId');\r\n        this.trackPosts = navParams.get('trackPosts');\r\n        this.locked = navParams.get('locked');\r\n\r\n        this.isOnline = this.appProvider.isOnline();\r\n        this.onlineObserver = network.onchange().subscribe((online) => {\r\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\r\n            zone.run(() => {\r\n                this.isOnline = this.appProvider.isOnline();\r\n            });\r\n        });\r\n        this.isSplitViewOn = this.svComponent && this.svComponent.isOn();\r\n\r\n        this.discussionStr = translate.instant('addon.mod_forum.discussion');\r\n    }\r\n\r\n    /**\r\n     * View loaded.\r\n     */\r\n    ionViewDidLoad(): void {\r\n        this.fetchPosts(true, false, true);\r\n    }\r\n\r\n    /**\r\n     * User entered the page that contains the component.\r\n     */\r\n    ionViewDidEnter(): void {\r\n        // Refresh data if this discussion is synchronized automatically.\r\n        this.syncObserver = this.eventsProvider.on(AddonModForumSyncProvider.AUTO_SYNCED, (data) => {\r\n            if (data.forumId == this.forumId && this.discussionId == data.discussionId\r\n                    && data.userId == this.sitesProvider.getCurrentSiteUserId()) {\r\n                // Refresh the data.\r\n                this.discussionLoaded = false;\r\n                this.refreshPosts();\r\n            }\r\n        }, this.sitesProvider.getCurrentSiteId());\r\n\r\n        // Refresh data if this forum discussion is synchronized from discussions list.\r\n        this.syncManualObserver = this.eventsProvider.on(AddonModForumSyncProvider.MANUAL_SYNCED, (data) => {\r\n            if (data.source != 'discussion' && data.forumId == this.forumId &&\r\n                    data.userId == this.sitesProvider.getCurrentSiteUserId()) {\r\n                // Refresh the data.\r\n                this.discussionLoaded = false;\r\n                this.refreshPosts();\r\n            }\r\n        }, this.sitesProvider.getCurrentSiteId());\r\n\r\n        // Trigger view event, to highlight the current opened discussion in the split view.\r\n        this.eventsProvider.trigger(AddonModForumProvider.VIEW_DISCUSSION_EVENT, {\r\n            forumId: this.forumId,\r\n            discussion: this.discussionId\r\n        }, this.sitesProvider.getCurrentSiteId());\r\n    }\r\n\r\n    /**\r\n     * Check if we can leave the page or not.\r\n     *\r\n     * @return {boolean|Promise<void>} Resolved if we can leave it, rejected if not.\r\n     */\r\n    ionViewCanLeave(): boolean | Promise<void> {\r\n        let promise: any;\r\n\r\n        if (this.forumHelper.hasPostDataChanged(this.replyData, this.originalData)) {\r\n            // Show confirmation if some data has been modified.\r\n            promise = this.domUtils.showConfirm(this.translate.instant('core.confirmcanceledit'));\r\n        } else {\r\n            promise = Promise.resolve();\r\n        }\r\n\r\n        return promise.then(() => {\r\n            // Delete the local files from the tmp folder.\r\n            this.uploaderProvider.clearTmpFiles(this.replyData.files);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convenience function to get the forum.\r\n     *\r\n     * @return {Promise<any>} Promise resolved with the forum.\r\n     */\r\n    protected fetchForum(): Promise<any> {\r\n        if (this.courseId && this.cmId) {\r\n            return this.forumProvider.getForum(this.courseId, this.cmId);\r\n        } else if (this.courseId && this.forumId) {\r\n            return this.forumProvider.getForumById(this.courseId, this.forumId);\r\n        } else {\r\n            // Cannot get the forum.\r\n            return Promise.reject(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convenience function to get forum discussions.\r\n     *\r\n     * @param  {boolean} [sync]            Whether to try to synchronize the discussion.\r\n     * @param  {boolean} [showErrors]      Whether to show errors in a modal.\r\n     * @param  {boolean} [forceMarkAsRead] Whether to mark all posts as read.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected fetchPosts(sync?: boolean, showErrors?: boolean, forceMarkAsRead?: boolean): Promise<any> {\r\n        let syncPromise;\r\n        if (sync) {\r\n            // Try to synchronize the forum.\r\n            syncPromise = this.syncDiscussion(showErrors).catch(() => {\r\n                // Ignore errors.\r\n            });\r\n        } else {\r\n            syncPromise = Promise.resolve();\r\n        }\r\n\r\n        let onlinePosts = [];\r\n        const offlineReplies = [];\r\n        let hasUnreadPosts = false;\r\n\r\n        return syncPromise.then(() => {\r\n            return this.forumProvider.getDiscussionPosts(this.discussionId).then((posts) => {\r\n                onlinePosts = posts;\r\n\r\n            }).then(() => {\r\n                // Check if there are responses stored in offline.\r\n                return this.forumOffline.getDiscussionReplies(this.discussionId).then((replies) => {\r\n                    this.postHasOffline = !!replies.length;\r\n                    const convertPromises = [];\r\n\r\n                    // Index posts to allow quick access. Also check unread field.\r\n                    const posts = {};\r\n                    onlinePosts.forEach((post) => {\r\n                        posts[post.id] = post;\r\n                        hasUnreadPosts = hasUnreadPosts || !post.postread;\r\n                    });\r\n\r\n                    replies.forEach((offlineReply) => {\r\n                        // If we don't have forumId and courseId, get it from the post.\r\n                        if (!this.forumId) {\r\n                            this.forumId = offlineReply.forumid;\r\n                        }\r\n                        if (!this.courseId) {\r\n                            this.courseId = offlineReply.courseid;\r\n                        }\r\n\r\n                        convertPromises.push(this.forumHelper.convertOfflineReplyToOnline(offlineReply).then((reply) => {\r\n                            offlineReplies.push(reply);\r\n\r\n                            // Disable reply of the parent. Reply in offline to the same post is not allowed, edit instead.\r\n                            posts[reply.parent].canreply = false;\r\n                        }));\r\n                    });\r\n\r\n                    return Promise.all(convertPromises).then(() => {\r\n                        // Convert back to array.\r\n                        onlinePosts = this.utils.objectToArray(posts);\r\n                    });\r\n                });\r\n            });\r\n        }).then(() => {\r\n            const posts = offlineReplies.concat(onlinePosts);\r\n            this.discussion = this.forumProvider.extractStartingPost(posts);\r\n\r\n            // If sort type is nested, normal sorting is disabled and nested posts will be displayed.\r\n            if (this.sort == 'nested') {\r\n                // Sort first by creation date to make format tree work.\r\n                this.forumProvider.sortDiscussionPosts(posts, 'ASC');\r\n                this.posts = this.utils.formatTree(posts, 'parent', 'id', this.discussion.id);\r\n            } else {\r\n                // Set default reply subject.\r\n                const direction = this.sort == 'flat-newest' ? 'DESC' : 'ASC';\r\n                this.forumProvider.sortDiscussionPosts(posts, direction);\r\n                this.posts = posts;\r\n            }\r\n            this.defaultSubject = this.translate.instant('addon.mod_forum.re') + ' ' + this.discussion.subject;\r\n            this.replyData.subject = this.defaultSubject;\r\n\r\n            // Now try to get the forum.\r\n            return this.fetchForum().then((forum) => {\r\n                if (this.discussion.userfullname && this.discussion.parent == 0 && forum.type == 'single') {\r\n                    // Hide author for first post and type single.\r\n                    this.discussion.userfullname = null;\r\n                }\r\n\r\n                // \"forum.istracked\" is more reliable than \"trackPosts\".\r\n                if (typeof forum.istracked != 'undefined') {\r\n                    this.trackPosts = forum.istracked;\r\n                }\r\n\r\n                this.forumId = forum.id;\r\n                this.cmId = forum.cmid;\r\n                this.forum = forum;\r\n            }).catch(() => {\r\n                // Ignore errors.\r\n                this.forum = {};\r\n            });\r\n        }).catch((message) => {\r\n            this.domUtils.showErrorModal(message);\r\n        }).finally(() => {\r\n            this.discussionLoaded = true;\r\n            this.refreshIcon = 'refresh';\r\n            this.syncIcon = 'sync';\r\n\r\n            if (forceMarkAsRead || (hasUnreadPosts && this.trackPosts)) {\r\n                // // Add log in Moodle and mark unread posts as readed.\r\n                this.forumProvider.logDiscussionView(this.discussionId).catch(() => {\r\n                    // Ignore errors.\r\n                }).finally(() => {\r\n                    // Trigger mark read posts.\r\n                    this.eventsProvider.trigger(AddonModForumProvider.MARK_READ_EVENT, {\r\n                        courseId: this.courseId,\r\n                        moduleId: this.cmId\r\n                    }, this.sitesProvider.getCurrentSiteId());\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Tries to synchronize the posts discussion.\r\n     *\r\n     * @param  {boolean} showErrors Whether to show errors in a modal.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected syncDiscussion(showErrors: boolean): Promise<any> {\r\n        return this.forumSync.syncDiscussionReplies(this.discussionId).then((result) => {\r\n            if (result.warnings && result.warnings.length) {\r\n                this.domUtils.showErrorModal(result.warnings[0]);\r\n            }\r\n\r\n            if (result && result.updated) {\r\n                // Sync successful, send event.\r\n                this.eventsProvider.trigger(AddonModForumSyncProvider.MANUAL_SYNCED, {\r\n                    forumId: this.forumId,\r\n                    userId: this.sitesProvider.getCurrentSiteUserId(),\r\n                    source: 'discussion'\r\n                }, this.sitesProvider.getCurrentSiteId());\r\n            }\r\n\r\n            return result.updated;\r\n        }).catch((error) => {\r\n            if (showErrors) {\r\n                this.domUtils.showErrorModalDefault(error, 'core.errorsync', true);\r\n            }\r\n\r\n            return Promise.reject(null);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param {any}       [refresher] Refresher.\r\n     * @param {Function}  [done] Function to call when done.\r\n     * @param {boolean}   [showErrors=false] If show errors to the user of hide them.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    doRefresh(refresher?: any, done?: () => void, showErrors: boolean = false): Promise<any> {\r\n        if (this.discussionLoaded) {\r\n            return this.refreshPosts(true, showErrors).finally(() => {\r\n                refresher && refresher.complete();\r\n                done && done();\r\n            });\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Refresh posts.\r\n     *\r\n     * @param  {boolean} [sync]       Whether to try to synchronize the discussion.\r\n     * @param  {boolean} [showErrors] Whether to show errors in a modal.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    refreshPosts(sync?: boolean, showErrors?: boolean): Promise<any> {\r\n        this.domUtils.scrollToTop(this.content);\r\n        this.refreshIcon = 'spinner';\r\n        this.syncIcon = 'spinner';\r\n\r\n        return this.forumProvider.invalidateDiscussionPosts(this.discussionId).catch(() => {\r\n            // Ignore errors.\r\n        }).then(() => {\r\n            return this.fetchPosts(sync, showErrors);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to change posts sorting\r\n     *\r\n     * @param  {SortType} type Sort type.\r\n     * @return {Promise<any>} Promised resolved when done.\r\n     */\r\n    changeSort(type: SortType): Promise<any> {\r\n        this.discussionLoaded = false;\r\n        this.sort = type;\r\n        this.domUtils.scrollToTop(this.content);\r\n\r\n        return this.fetchPosts();\r\n    }\r\n\r\n    /**\r\n     * New post added.\r\n     */\r\n    postListChanged(): void {\r\n        // Trigger an event to notify a new reply.\r\n        const data = {\r\n            forumId: this.forumId,\r\n            discussionId: this.discussionId,\r\n            cmId: this.cmId\r\n        };\r\n        this.eventsProvider.trigger(AddonModForumProvider.REPLY_DISCUSSION_EVENT, data, this.sitesProvider.getCurrentSiteId());\r\n\r\n        this.discussionLoaded = false;\r\n        this.refreshPosts().finally(() => {\r\n            this.discussionLoaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Runs when the page is about to leave and no longer be the active page.\r\n     */\r\n    ionViewWillLeave(): void {\r\n        this.syncObserver && this.syncObserver.off();\r\n        this.syncManualObserver && this.syncManualObserver.off();\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.onlineObserver && this.onlineObserver.unsubscribe();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/forum/pages/discussion/discussion.ts"],"sourceRoot":""}
=======
{"version":3,"sources":["../../src/addon/mod/forum/pages/new-discussion/new-discussion.module.ts","../../src/addon/mod/forum/pages/new-discussion/new-discussion.ts"],"names":[],"mappings":"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","file":"82.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { AddonModForumNewDiscussionPage } from './new-discussion';\n\n@NgModule({\n    declarations: [\n        AddonModForumNewDiscussionPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        IonicPageModule.forChild(AddonModForumNewDiscussionPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonModForumNewDiscussionPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/forum/pages/new-discussion/new-discussion.module.ts","// (C) Copyright 2015 Martin Dougiamas\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, Optional, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreGroupsProvider } from '@providers/groups';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { CoreSyncProvider } from '@providers/sync';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreTextUtilsProvider } from '@providers/utils/text';\nimport { CoreUtilsProvider } from '@providers/utils/utils';\nimport { CoreFileUploaderProvider } from '@core/fileuploader/providers/fileuploader';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreRichTextEditorComponent } from '@components/rich-text-editor/rich-text-editor.ts';\nimport { AddonModForumProvider } from '../../providers/forum';\nimport { AddonModForumOfflineProvider } from '../../providers/offline';\nimport { AddonModForumHelperProvider } from '../../providers/helper';\nimport { AddonModForumSyncProvider } from '../../providers/sync';\n\n/**\n * Page that displays the new discussion form.\n */\n@IonicPage({ segment: 'addon-mod-forum-new-discussion' })\n@Component({\n    selector: 'page-addon-mod-forum-new-discussion',\n    templateUrl: 'new-discussion.html',\n})\nexport class AddonModForumNewDiscussionPage implements OnDestroy {\n\n    @ViewChild(CoreRichTextEditorComponent) messageEditor: CoreRichTextEditorComponent;\n\n    component = AddonModForumProvider.COMPONENT;\n    messageControl = new FormControl();\n    groupsLoaded = false;\n    showGroups = false;\n    hasOffline = false;\n    canCreateAttachments = true; // Assume we can by default.\n    canPin = false;\n    forum: any;\n    showForm = false;\n    groups = [];\n    newDiscussion = {\n        subject: '',\n        message: null, // Null means empty or just white space.\n        groupId: 0,\n        subscribe: true,\n        pin: false,\n        files: []\n    };\n\n    protected courseId: number;\n    protected cmId: number;\n    protected forumId: number;\n    protected timeCreated: number;\n    protected syncId: string;\n    protected syncObserver: any;\n    protected isDestroyed = false;\n    protected originalData: any;\n\n    constructor(navParams: NavParams,\n            private navCtrl: NavController,\n            private translate: TranslateService,\n            private domUtils: CoreDomUtilsProvider,\n            private eventsProvider: CoreEventsProvider,\n            private groupsProvider: CoreGroupsProvider,\n            private sitesProvider: CoreSitesProvider,\n            private syncProvider: CoreSyncProvider,\n            private uploaderProvider: CoreFileUploaderProvider,\n            private textUtils: CoreTextUtilsProvider,\n            private utils: CoreUtilsProvider,\n            private forumProvider: AddonModForumProvider,\n            private forumOffline: AddonModForumOfflineProvider,\n            private forumSync: AddonModForumSyncProvider,\n            private forumHelper: AddonModForumHelperProvider,\n            @Optional() private svComponent: CoreSplitViewComponent) {\n        this.courseId = navParams.get('courseId');\n        this.cmId = navParams.get('cmId');\n        this.forumId = navParams.get('forumId');\n        this.timeCreated = navParams.get('timeCreated');\n    }\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        this.fetchDiscussionData().finally(() => {\n            this.groupsLoaded = true;\n        });\n    }\n\n    /**\n     * User entered the page that contains the component.\n     */\n    ionViewDidEnter(): void {\n        // Refresh data if this discussion is synchronized automatically.\n        this.syncObserver = this.eventsProvider.on(AddonModForumSyncProvider.AUTO_SYNCED, (data) => {\n            if (data.forumId == this.forumId && data.userId == this.sitesProvider.getCurrentSiteUserId()) {\n                this.domUtils.showAlertTranslated('core.notice', 'core.contenteditingsynced');\n                this.returnToDiscussions();\n            }\n        }, this.sitesProvider.getCurrentSiteId());\n\n        // Trigger view event, to highlight the current opened discussion in the split view.\n        this.eventsProvider.trigger(AddonModForumProvider.VIEW_DISCUSSION_EVENT, {\n            forumId: this.forumId,\n            discussion: -this.timeCreated\n        }, this.sitesProvider.getCurrentSiteId());\n    }\n\n    /**\n     * Fetch if forum uses groups and the groups it uses.\n     *\n     * @param  {boolean} [refresh] Whether we're refreshing data.\n     * @return {Promise<any>} Promise resolved when done.\n     */\n    protected fetchDiscussionData(refresh?: boolean): Promise<any> {\n        return this.groupsProvider.getActivityGroupMode(this.cmId).then((mode) => {\n            const promises = [];\n\n            if (mode === CoreGroupsProvider.SEPARATEGROUPS || mode === CoreGroupsProvider.VISIBLEGROUPS) {\n                promises.push(this.groupsProvider.getActivityAllowedGroups(this.cmId).then((forumGroups) => {\n                    let promise;\n                    if (mode === CoreGroupsProvider.VISIBLEGROUPS) {\n                        // We need to check which of the returned groups the user can post to.\n                        promise = this.validateVisibleGroups(forumGroups);\n                    } else {\n                        // WS already filters groups, no need to do it ourselves. Add \"All participants\" if needed.\n                        promise = this.addAllParticipantsOption(forumGroups, true);\n                    }\n\n                    return promise.then((forumGroups) => {\n                        if (forumGroups.length > 0) {\n                            this.groups = forumGroups;\n                            // Do not override group id.\n                            this.newDiscussion.groupId = this.newDiscussion.groupId || forumGroups[0].id;\n                            this.showGroups = true;\n                        } else {\n                            const message = mode === CoreGroupsProvider.SEPARATEGROUPS ?\n                                    'addon.mod_forum.cannotadddiscussionall' : 'addon.mod_forum.cannotadddiscussion';\n\n                            return Promise.reject(this.translate.instant(message));\n                        }\n                    });\n                }));\n            } else {\n                this.showGroups = false;\n\n                // Use the canAddDiscussion WS to check if the user can add attachments and pin discussions.\n                promises.push(this.forumProvider.canAddDiscussionToAll(this.forumId).then((response) => {\n                    this.canPin = !!response.canpindiscussions;\n                    this.canCreateAttachments = !!response.cancreateattachment;\n                }).catch(() => {\n                    // Ignore errors, use default values.\n                }));\n            }\n\n            // Get forum.\n            promises.push(this.forumProvider.getForum(this.courseId, this.cmId).then((forum) => {\n                this.forum = forum;\n            }));\n\n            // If editing a discussion, get offline data.\n            if (this.timeCreated && !refresh) {\n                this.syncId = this.forumSync.getForumSyncId(this.forumId);\n                promises.push(this.forumSync.waitForSync(this.syncId).then(() => {\n                    // Do not block if the scope is already destroyed.\n                    if (!this.isDestroyed) {\n                        this.syncProvider.blockOperation(AddonModForumProvider.COMPONENT, this.syncId);\n                    }\n\n                    return this.forumOffline.getNewDiscussion(this.forumId, this.timeCreated).then((discussion) => {\n                        this.hasOffline = true;\n                        discussion.options = discussion.options || {};\n                        this.newDiscussion.groupId = discussion.groupid ? discussion.groupid : this.newDiscussion.groupId;\n                        this.newDiscussion.subject = discussion.subject;\n                        this.newDiscussion.message = discussion.message;\n                        this.newDiscussion.subscribe = discussion.options.discussionsubscribe;\n                        this.newDiscussion.pin = discussion.options.discussionpinned;\n                        this.messageControl.setValue(discussion.message);\n\n                        // Treat offline attachments if any.\n                        if (discussion.options.attachmentsid && discussion.options.attachmentsid.offline) {\n                            return this.forumHelper.getNewDiscussionStoredFiles(this.forumId, this.timeCreated).then((files) => {\n                                this.newDiscussion.files = files;\n                            });\n                        }\n                    });\n                }));\n            }\n\n            return Promise.all(promises);\n        }).then(() => {\n            if (!this.originalData) {\n                // Initialize original data.\n                this.originalData = {\n                    subject: this.newDiscussion.subject,\n                    message: this.newDiscussion.message,\n                    files: this.newDiscussion.files.slice(),\n                };\n            }\n            this.showForm = true;\n        }).catch((message) => {\n            this.domUtils.showErrorModalDefault(message, 'addon.mod_forum.errorgetgroups', true);\n            this.showForm = false;\n        });\n    }\n\n    /**\n     * Validate which of the groups returned by getActivityAllowedGroups in visible groups should be shown to post to.\n     *\n     * @param  {any[]} forumGroups Forum groups.\n     * @return {Promise<any>} Promise resolved when done.\n     */\n    protected validateVisibleGroups(forumGroups: any[]): Promise<any> {\n        // We first check if the user can post to all the groups.\n        return this.forumProvider.canAddDiscussionToAll(this.forumId).catch(() => {\n            // The call failed, let's assume he can't.\n            return {\n                status: false,\n                canpindiscussions: false,\n                cancreateattachment: true\n            };\n        }).then((response) => {\n            this.canPin = !!response.canpindiscussions;\n            this.canCreateAttachments = !!response.cancreateattachment;\n\n            if (response.status) {\n                // The user can post to all groups, add the \"All participants\" option and return them all.\n                return this.addAllParticipantsOption(forumGroups, false);\n            } else {\n                // The user can't post to all groups, let's check which groups he can post to.\n                const promises = [];\n                const filtered = [];\n\n                forumGroups.forEach((group) => {\n                    promises.push(this.forumProvider.canAddDiscussion(this.forumId, group.id).catch(() => {\n                        /* The call failed, let's return true so the group is shown. If the user can't post to\n                           it an error will be shown when he tries to add the discussion. */\n                        return {\n                            status: true\n                        };\n                    }).then((response) => {\n                        if (response.status) {\n                            filtered.push(group);\n                        }\n                    }));\n                });\n\n                return Promise.all(promises).then(() => {\n                    return filtered;\n                });\n            }\n        });\n    }\n\n    /**\n     * Filter forum groups, returning only those that are inside user groups.\n     *\n     * @param  {any[]} forumGroups Forum groups.\n     * @param  {any[]} userGroups User groups.\n     * @return {any[]} Filtered groups.\n     */\n    protected filterGroups(forumGroups: any[], userGroups: any[]): any[] {\n        const filtered = [];\n        const userGroupsIds = userGroups.map((g) => g.id);\n\n        forumGroups.forEach((fg) => {\n            if (userGroupsIds.indexOf(fg.id) > -1) {\n                filtered.push(fg);\n            }\n        });\n\n        return filtered;\n    }\n\n    /**\n     * Add the \"All participants\" option to a list of groups if the user can add a discussion to all participants.\n     *\n     * @param  {any[]}   groups Groups.\n     * @param  {boolean} check  True to check if the user can add a discussion to all participants.\n     * @return {Promise<any[]>} Promise resolved with the list of groups.\n     */\n    protected addAllParticipantsOption(groups: any[], check: boolean): Promise<any[]> {\n        if (!this.forumProvider.isAllParticipantsFixed()) {\n            // All participants has a bug, don't add it.\n            return Promise.resolve(groups);\n        }\n\n        let promise;\n\n        if (check) {\n            // We need to check if the user can add a discussion to all participants.\n            promise = this.forumProvider.canAddDiscussionToAll(this.forumId).then((response) => {\n                this.canPin = !!response.canpindiscussions;\n                this.canCreateAttachments = !!response.cancreateattachment;\n\n                return response.status;\n            }).catch(() => {\n                // The call failed, let's assume he can't.\n                return false;\n            });\n        } else {\n            // No need to check, assume the user can.\n            promise = Promise.resolve(true);\n        }\n\n        return promise.then((canAdd) => {\n            if (canAdd) {\n                groups.unshift({\n                    courseid: this.courseId,\n                    id: -1,\n                    name: this.translate.instant('core.allparticipants')\n                });\n            }\n\n            return groups;\n        });\n    }\n\n    /**\n     * Pull to refresh.\n     *\n     * @param {any} refresher Refresher.\n     */\n    refreshGroups(refresher: any): void {\n        const promises = [\n            this.groupsProvider.invalidateActivityGroupMode(this.cmId),\n            this.groupsProvider.invalidateActivityAllowedGroups(this.cmId),\n            this.forumProvider.invalidateCanAddDiscussion(this.forumId),\n        ];\n\n        Promise.all(promises).finally(() => {\n            this.fetchDiscussionData(true).finally(() => {\n                refresher.complete();\n            });\n        });\n    }\n\n    /**\n     * Convenience function to update or return to discussions depending on device.\n     *\n     * @param {number} [discussionId] Id of the new discussion.\n     * @param {number} [discTimecreated] The time created of the discussion (if offline).\n     */\n    protected returnToDiscussions(discussionId?: number, discTimecreated?: number): void {\n        const data: any = {\n            forumId: this.forumId,\n            cmId: this.cmId,\n            discussionId: discussionId,\n            discTimecreated: discTimecreated\n        };\n        this.eventsProvider.trigger(AddonModForumProvider.NEW_DISCUSSION_EVENT, data, this.sitesProvider.getCurrentSiteId());\n\n        // Delete the local files from the tmp folder.\n        this.uploaderProvider.clearTmpFiles(this.newDiscussion.files);\n\n        if (this.svComponent && this.svComponent.isOn()) {\n            // Empty form.\n            this.hasOffline = false;\n            this.newDiscussion.subject = '';\n            this.newDiscussion.message = null;\n            this.newDiscussion.files = [];\n            this.messageEditor.clearText();\n            this.originalData = this.utils.clone(this.newDiscussion);\n\n            // Trigger view event, to highlight the current opened discussion in the split view.\n            this.eventsProvider.trigger(AddonModForumProvider.VIEW_DISCUSSION_EVENT, {\n                forumId: this.forumId,\n                discussion: 0\n            }, this.sitesProvider.getCurrentSiteId());\n        } else {\n            this.originalData = null; // Avoid asking for confirmation.\n            this.navCtrl.pop();\n        }\n    }\n\n    /**\n     * Message changed.\n     *\n     * @param {string} text The new text.\n     */\n    onMessageChange(text: string): void {\n        this.newDiscussion.message = text;\n    }\n\n    /**\n     * Add a new discussion.\n     */\n    add(): void {\n        const forumName = this.forum.name;\n        const subject = this.newDiscussion.subject;\n        let  message = this.newDiscussion.message;\n        const pin = this.newDiscussion.pin;\n        const groupId = this.newDiscussion.groupId;\n        const attachments = this.newDiscussion.files;\n        const discTimecreated = this.timeCreated || Date.now();\n        const options: any = {\n            discussionsubscribe: !!this.newDiscussion.subscribe\n        };\n        let saveOffline = false;\n\n        if (!subject) {\n            this.domUtils.showErrorModal('addon.mod_forum.erroremptysubject', true);\n\n            return;\n        }\n        if (!message) {\n            this.domUtils.showErrorModal('addon.mod_forum.erroremptymessage', true);\n\n            return;\n        }\n\n        const modal = this.domUtils.showModalLoading('core.sending', true);\n        let promise;\n\n        // Add some HTML to the message if needed.\n        message = this.textUtils.formatHtmlLines(message);\n\n        // Upload attachments first if any.\n        if (attachments.length) {\n            promise = this.forumHelper.uploadOrStoreNewDiscussionFiles(this.forumId, discTimecreated, attachments, false)\n                    .catch(() => {\n                // Cannot upload them in online, save them in offline.\n                saveOffline = true;\n\n                return this.forumHelper.uploadOrStoreNewDiscussionFiles(this.forumId, discTimecreated, attachments, true);\n            });\n        } else {\n            promise = Promise.resolve();\n        }\n\n        promise.then((attach) => {\n            if (attach) {\n                options.attachmentsid = attach;\n            }\n            if (pin) {\n                options.discussionpinned = true;\n            }\n\n            if (saveOffline) {\n                // Save discussion in offline.\n                return this.forumOffline.addNewDiscussion(this.forumId, forumName, this.courseId, subject,\n                        message, options, groupId, discTimecreated).then(() => {\n                    // Don't return anything.\n                });\n            } else {\n                // Try to send it to server.\n                // Don't allow offline if there are attachments since they were uploaded fine.\n                return this.forumProvider.addNewDiscussion(this.forumId, forumName, this.courseId, subject, message, options,\n                        groupId, undefined, discTimecreated, !attachments.length);\n            }\n        }).then((discussionId) => {\n            if (discussionId) {\n                // Data sent to server, delete stored files (if any).\n                this.forumHelper.deleteNewDiscussionStoredFiles(this.forumId, discTimecreated);\n            }\n\n            this.returnToDiscussions(discussionId, discTimecreated);\n        }).catch((message) => {\n            this.domUtils.showErrorModalDefault(message, 'addon.mod_forum.cannotcreatediscussion', true);\n        }).finally(() => {\n            modal.dismiss();\n        });\n    }\n\n    /**\n     * Discard an offline saved discussion.\n     */\n    discard(): void {\n        this.domUtils.showConfirm(this.translate.instant('core.areyousure')).then(() => {\n            const promises = [];\n\n            promises.push(this.forumOffline.deleteNewDiscussion(this.forumId, this.timeCreated));\n            promises.push(this.forumHelper.deleteNewDiscussionStoredFiles(this.forumId, this.timeCreated).catch(() => {\n                // Ignore errors, maybe there are no files.\n            }));\n\n            return Promise.all(promises).then(() => {\n                this.returnToDiscussions();\n            });\n        }).catch(() => {\n            // Cancelled.\n        });\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @return {boolean|Promise<void>} Resolved if we can leave it, rejected if not.\n     */\n    ionViewCanLeave(): boolean | Promise<void> {\n        let promise: any;\n\n        if (this.forumHelper.hasPostDataChanged(this.newDiscussion, this.originalData)) {\n            // Show confirmation if some data has been modified.\n            promise = this.domUtils.showConfirm(this.translate.instant('core.confirmcanceledit'));\n        } else {\n            promise = Promise.resolve();\n        }\n\n        return promise.then(() => {\n            // Delete the local files from the tmp folder.\n            this.uploaderProvider.clearTmpFiles(this.newDiscussion.files);\n        });\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        this.syncObserver && this.syncObserver.off();\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        if (this.syncId) {\n            this.syncProvider.unblockOperation(AddonModForumProvider.COMPONENT, this.syncId);\n        }\n        this.isDestroyed = true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/forum/pages/new-discussion/new-discussion.ts"],"sourceRoot":""}
>>>>>>> 5632a65c1fdc0002876490b68e6dc6621a0dd43d
