{"version":3,"sources":["../../src/addon/messages/pages/group-conversations/group-conversations.module.ts","../../src/addon/messages/pages/group-conversations/group-conversations.ts"],"names":[],"mappings":"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","file":"107.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AddonMessagesGroupConversationsPage } from './group-conversations';\r\nimport { CoreComponentsModule } from '@components/components.module';\r\nimport { CoreDirectivesModule } from '@directives/directives.module';\r\nimport { CorePipesModule } from '@pipes/pipes.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonMessagesGroupConversationsPage,\r\n    ],\r\n    imports: [\r\n        CoreComponentsModule,\r\n        CoreDirectivesModule,\r\n        CorePipesModule,\r\n        IonicPageModule.forChild(AddonMessagesGroupConversationsPage),\r\n        TranslateModule.forChild()\r\n    ],\r\n})\r\nexport class AddonMessagesGroupConversationsPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/group-conversations/group-conversations.module.ts","// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { IonicPage, Platform, NavController, NavParams, Content } from 'ionic-angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CoreEventsProvider } from '@providers/events';\r\nimport { CoreSitesProvider } from '@providers/sites';\r\nimport { AddonMessagesProvider } from '../../providers/messages';\r\nimport { AddonMessagesOfflineProvider } from '../../providers/messages-offline';\r\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\r\nimport { CoreUtilsProvider } from '@providers/utils/utils';\r\nimport { AddonPushNotificationsDelegate } from '@addon/pushnotifications/providers/delegate';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { CoreUserProvider } from '@core/user/providers/user';\r\n\r\n/**\r\n * Page that displays the list of conversations, including group conversations.\r\n */\r\n@IonicPage({ segment: 'addon-messages-group-conversations' })\r\n@Component({\r\n    selector: 'page-addon-messages-group-conversations',\r\n    templateUrl: 'group-conversations.html',\r\n})\r\nexport class AddonMessagesGroupConversationsPage implements OnInit, OnDestroy {\r\n    @ViewChild(CoreSplitViewComponent) splitviewCtrl: CoreSplitViewComponent;\r\n    @ViewChild(Content) content: Content;\r\n    @ViewChild('favlist') favListEl: ElementRef;\r\n    @ViewChild('grouplist') groupListEl: ElementRef;\r\n    @ViewChild('indlist') indListEl: ElementRef;\r\n\r\n    loaded = false;\r\n    loadingMessage: string;\r\n    selectedConversationId: number;\r\n    selectedUserId: number;\r\n    contactRequestsCount = 0;\r\n    favourites: any = {\r\n        type: null,\r\n        favourites: true,\r\n        count: 0,\r\n        unread: 0\r\n    };\r\n    group: any = {\r\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP,\r\n        favourites: false,\r\n        count: 0,\r\n        unread: 0\r\n    };\r\n    individual: any = {\r\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\r\n        favourites: false,\r\n        count: 0,\r\n        unread: 0\r\n    };\r\n    typeIndividual = AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL;\r\n    currentListEl: HTMLElement;\r\n\r\n    protected loadingString: string;\r\n    protected siteId: string;\r\n    protected currentUserId: number;\r\n    protected conversationId: number;\r\n    protected newMessagesObserver: any;\r\n    protected pushObserver: any;\r\n    protected appResumeSubscription: any;\r\n    protected readChangedObserver: any;\r\n    protected cronObserver: any;\r\n    protected openConversationObserver: any;\r\n    protected updateConversationListObserver: any;\r\n    protected contactRequestsCountObserver: any;\r\n    protected memberInfoObserver: any;\r\n\r\n    constructor(eventsProvider: CoreEventsProvider, sitesProvider: CoreSitesProvider, translate: TranslateService,\r\n            private messagesProvider: AddonMessagesProvider, private domUtils: CoreDomUtilsProvider, navParams: NavParams,\r\n            private navCtrl: NavController, platform: Platform, private utils: CoreUtilsProvider,\r\n            pushNotificationsDelegate: AddonPushNotificationsDelegate, private messagesOffline: AddonMessagesOfflineProvider,\r\n            private userProvider: CoreUserProvider) {\r\n\r\n        this.loadingString = translate.instant('core.loading');\r\n        this.siteId = sitesProvider.getCurrentSiteId();\r\n        this.currentUserId = sitesProvider.getCurrentSiteUserId();\r\n        this.conversationId = navParams.get('conversationId') || false;\r\n\r\n        // Update conversations when new message is received.\r\n        this.newMessagesObserver = eventsProvider.on(AddonMessagesProvider.NEW_MESSAGE_EVENT, (data) => {\r\n            // Check if the new message belongs to the option that is currently expanded.\r\n            const expandedOption = this.getExpandedOption(),\r\n                messageOption = this.getConversationOption(data);\r\n\r\n            if (expandedOption != messageOption) {\r\n                return; // Message doesn't belong to current list, stop.\r\n            }\r\n\r\n            // Search the conversation to update.\r\n            const conversation = this.findConversation(data.conversationId, data.userId, expandedOption);\r\n\r\n            if (typeof conversation == 'undefined') {\r\n                // Probably a new conversation, refresh the list.\r\n                this.loaded = false;\r\n                this.refreshData().finally(() => {\r\n                    this.loaded = true;\r\n                });\r\n            } else if (conversation.lastmessage != data.message || conversation.lastmessagedate != data.timecreated / 1000) {\r\n                const isNewer = data.timecreated / 1000 > conversation.lastmessagedate;\r\n\r\n                // An existing conversation has a new message, update the last message.\r\n                conversation.lastmessage = data.message;\r\n                conversation.lastmessagedate = data.timecreated / 1000;\r\n\r\n                // Sort the affected list.\r\n                const option = this.getConversationOption(conversation);\r\n                option.conversations = this.messagesProvider.sortConversations(option.conversations);\r\n\r\n                if (isNewer) {\r\n                    // The last message is newer than the previous one, scroll to top to keep viewing the conversation.\r\n                    this.domUtils.scrollToTop(this.content);\r\n                }\r\n            }\r\n        }, this.siteId);\r\n\r\n        // Update conversations when a message is read.\r\n        this.readChangedObserver = eventsProvider.on(AddonMessagesProvider.READ_CHANGED_EVENT, (data) => {\r\n            if (data.conversationId) {\r\n                const conversation = this.findConversation(data.conversationId);\r\n\r\n                if (typeof conversation != 'undefined') {\r\n                    // A conversation has been read reset counter.\r\n                    conversation.unreadcount = 0;\r\n\r\n                    // Conversations changed, invalidate them and refresh unread counts.\r\n                    this.messagesProvider.invalidateConversations();\r\n                    this.messagesProvider.refreshUnreadConversationCounts();\r\n                }\r\n            }\r\n        }, this.siteId);\r\n\r\n        // Load a discussion if we receive an event to do so.\r\n        this.openConversationObserver = eventsProvider.on(AddonMessagesProvider.OPEN_CONVERSATION_EVENT, (data) => {\r\n            if (data.conversationId || data.userId) {\r\n                this.gotoConversation(data.conversationId, data.userId);\r\n            }\r\n        }, this.siteId);\r\n\r\n        // Refresh the view when the app is resumed.\r\n        this.appResumeSubscription = platform.resume.subscribe(() => {\r\n            if (!this.loaded) {\r\n                return;\r\n            }\r\n            this.loaded = false;\r\n            this.refreshData().finally(() => {\r\n                this.loaded = true;\r\n            });\r\n        });\r\n\r\n        // Update conversations if we receive an event to do so.\r\n        this.updateConversationListObserver = eventsProvider.on(AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT, () => {\r\n            this.refreshData();\r\n        }, this.siteId);\r\n\r\n        // If a message push notification is received, refresh the view.\r\n        this.pushObserver = pushNotificationsDelegate.on('receive').subscribe((notification) => {\r\n            // New message received. If it's from current site, refresh the data.\r\n            if (utils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\r\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\r\n                this.refreshData(null, false);\r\n            }\r\n        });\r\n\r\n        // Update unread conversation counts.\r\n        this.cronObserver = eventsProvider.on(AddonMessagesProvider.UNREAD_CONVERSATION_COUNTS_EVENT, (data) => {\r\n            this.favourites.unread = data.favourites;\r\n            this.individual.unread = data.individual;\r\n            this.group.unread = data.group;\r\n         }, this.siteId);\r\n\r\n        // Update the contact requests badge.\r\n        this.contactRequestsCountObserver = eventsProvider.on(AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT, (data) => {\r\n            this.contactRequestsCount = data.count;\r\n        }, this.siteId);\r\n\r\n        // Update block status of a user.\r\n        this.memberInfoObserver = eventsProvider.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, (data) => {\r\n            if (!data.userBlocked && !data.userUnblocked) {\r\n                // The block status has not changed, ignore.\r\n                return;\r\n            }\r\n\r\n            const expandedOption = this.getExpandedOption();\r\n            if (expandedOption == this.individual || expandedOption == this.favourites) {\r\n                if (!expandedOption.conversations || expandedOption.conversations.length <= 0) {\r\n                    return;\r\n                }\r\n\r\n                const conversation = this.findConversation(undefined, data.userId, expandedOption);\r\n                if (conversation) {\r\n                    conversation.isblocked = data.userBlocked;\r\n                }\r\n            }\r\n        }, this.siteId);\r\n    }\r\n\r\n    /**\r\n     * Component loaded.\r\n     */\r\n    ngOnInit(): void {\r\n        if (this.conversationId) {\r\n            // There is a discussion to load, open the discussion in a new state.\r\n            this.gotoConversation(this.conversationId);\r\n        }\r\n\r\n        this.fetchData().then(() => {\r\n            if (!this.conversationId && this.splitviewCtrl.isOn()) {\r\n                // Load the first conversation.\r\n                let conversation;\r\n                const expandedOption = this.getExpandedOption();\r\n\r\n                if (expandedOption) {\r\n                    conversation = expandedOption.conversations[0];\r\n                }\r\n\r\n                if (conversation) {\r\n                    this.gotoConversation(conversation.id);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch conversations.\r\n     *\r\n     * @param {booleam} [refreshUnreadCounts=true] Whether to refresh unread counts.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected fetchData(refreshUnreadCounts: boolean = true): Promise<any> {\r\n        this.loadingMessage = this.loadingString;\r\n\r\n        // Load the amount of conversations and contact requests.\r\n        const promises = [];\r\n\r\n        promises.push(this.fetchConversationCounts());\r\n        promises.push(this.messagesProvider.getContactRequestsCount());  // View updated by the event observer.\r\n\r\n        return Promise.all(promises).then(() => {\r\n            if (typeof this.favourites.expanded == 'undefined') {\r\n                // The expanded status hasn't been initialized. Do it now.\r\n                if (this.conversationId) {\r\n                    // A certain conversation should be opened.\r\n                    // We don't know which option it belongs to, so we need to fetch the data for all of them.\r\n                    const promises = [];\r\n\r\n                    promises.push(this.fetchDataForOption(this.favourites, false, refreshUnreadCounts));\r\n                    promises.push(this.fetchDataForOption(this.group, false, refreshUnreadCounts));\r\n                    promises.push(this.fetchDataForOption(this.individual, false, refreshUnreadCounts));\r\n\r\n                    return Promise.all(promises).then(() => {\r\n                        // All conversations have been loaded, find the one we need to load and expand its option.\r\n                        const conversation = this.findConversation(this.conversationId);\r\n                        if (conversation) {\r\n                            const option = this.getConversationOption(conversation);\r\n\r\n                            return this.expandOption(option, refreshUnreadCounts);\r\n                        } else {\r\n                            // Conversation not found, just open the default option.\r\n                            this.calculateExpandedStatus();\r\n\r\n                            // Now load the data for the expanded option.\r\n                            return this.fetchDataForExpandedOption(refreshUnreadCounts);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // No conversation specified or not found, determine which one should be expanded.\r\n                this.calculateExpandedStatus();\r\n            }\r\n\r\n            // Now load the data for the expanded option.\r\n            return this.fetchDataForExpandedOption(refreshUnreadCounts);\r\n        }).catch((error) => {\r\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\r\n        }).finally(() => {\r\n            this.loaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate which option should be expanded initially.\r\n     */\r\n    protected calculateExpandedStatus(): void {\r\n        this.favourites.expanded = this.favourites.count != 0;\r\n        this.group.expanded = this.favourites.count == 0 && this.group.count != 0;\r\n        this.individual.expanded = this.favourites.count == 0 && this.group.count == 0;\r\n\r\n        this.loadCurrentListElement();\r\n    }\r\n\r\n    /**\r\n     * Fetch data for the expanded option.\r\n     *\r\n     * @param {booleam} [refreshUnreadCounts=true] Whether to refresh unread counts.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected fetchDataForExpandedOption(refreshUnreadCounts: boolean = true): Promise<any> {\r\n        const expandedOption = this.getExpandedOption();\r\n\r\n        if (expandedOption) {\r\n            return this.fetchDataForOption(expandedOption, false, refreshUnreadCounts);\r\n        } else {\r\n            // All options are collapsed, update the counts.\r\n            const promises = [];\r\n\r\n            promises.push(this.fetchConversationCounts());\r\n            if (refreshUnreadCounts) {\r\n                promises.push(this.messagesProvider.refreshUnreadConversationCounts()); // View updated by the event observer.\r\n            }\r\n\r\n            return Promise.all(promises);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch data for a certain option.\r\n     *\r\n     * @param {any} option The option to fetch data for.\r\n     * @param {boolean} [loadingMore} Whether we are loading more data or just the first ones.\r\n     * @param {booleam} [refreshUnreadCounts=true] Whether to refresh unread counts.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    fetchDataForOption(option: any, loadingMore?: boolean, refreshUnreadCounts: boolean = true): Promise<void> {\r\n        option.loadMoreError = false;\r\n\r\n        const limitFrom = loadingMore ? option.conversations.length : 0,\r\n            promises = [];\r\n        let data,\r\n            offlineMessages;\r\n\r\n        // Get the conversations and, if needed, the offline messages. Always try to get the latest data.\r\n        promises.push(this.messagesProvider.invalidateConversations().catch(() => {\r\n            // Shouldn't happen.\r\n        }).then(() => {\r\n            return this.messagesProvider.getConversations(option.type, option.favourites, limitFrom);\r\n        }).then((result) => {\r\n            data = result;\r\n        }));\r\n\r\n        if (!loadingMore) {\r\n            promises.push(this.messagesOffline.getAllMessages().then((data) => {\r\n                offlineMessages = data;\r\n            }));\r\n\r\n            promises.push(this.fetchConversationCounts());\r\n            if (refreshUnreadCounts) {\r\n                promises.push(this.messagesProvider.refreshUnreadConversationCounts()); // View updated by the event observer.\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            if (loadingMore) {\r\n                option.conversations = option.conversations.concat(data.conversations);\r\n                option.canLoadMore = data.canLoadMore;\r\n            } else {\r\n                option.conversations = data.conversations;\r\n                option.canLoadMore = data.canLoadMore;\r\n\r\n                if (offlineMessages && offlineMessages.length) {\r\n                    return this.loadOfflineMessages(option, offlineMessages).then(() => {\r\n                        // Sort the conversations, the offline messages could affect the order.\r\n                        option.conversations = this.messagesProvider.sortConversations(option.conversations);\r\n                    });\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch conversation counts.\r\n     *\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected fetchConversationCounts(): Promise<void> {\r\n        // Always try to get the latest data.\r\n        return this.messagesProvider.invalidateConversationCounts().catch(() => {\r\n            // Shouldn't happen.\r\n        }).then(() => {\r\n            return this.messagesProvider.getConversationCounts();\r\n        }).then((counts) => {\r\n            this.favourites.count = counts.favourites;\r\n            this.individual.count = counts.individual;\r\n            this.group.count = counts.group;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Find a conversation in the list of loaded conversations.\r\n     *\r\n     * @param {number} conversationId The conversation ID to search.\r\n     * @param {number} userId User ID to search (if no conversationId).\r\n     * @param {any} [option] The option to search in. If not defined, search in all options.\r\n     * @return {any} Conversation.\r\n     */\r\n    protected findConversation(conversationId: number, userId?: number, option?: any): any {\r\n        if (conversationId) {\r\n            const conversations = option ? (option.conversations || []) : ((this.favourites.conversations || [])\r\n                    .concat(this.group.conversations || []).concat(this.individual.conversations || []));\r\n\r\n            return conversations.find((conv) => {\r\n                return conv.id == conversationId;\r\n            });\r\n        }\r\n\r\n        const conversations = option ? (option.conversations || []) :\r\n                ((this.favourites.conversations || []).concat(this.individual.conversations || []));\r\n\r\n        return conversations.find((conv) => {\r\n            return conv.userid == userId;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the option that is currently expanded, undefined if they are all collapsed.\r\n     *\r\n     * @return {any} Option currently expanded.\r\n     */\r\n    protected getExpandedOption(): any {\r\n        if (this.favourites.expanded) {\r\n            return this.favourites;\r\n        } else if (this.group.expanded) {\r\n            return this.group;\r\n        } else if (this.individual.expanded) {\r\n            return this.individual;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate to contacts view.\r\n     */\r\n    gotoContacts(): void {\r\n        this.splitviewCtrl.getMasterNav().push('AddonMessagesContactsPage');\r\n    }\r\n\r\n    /**\r\n     * Navigate to a particular conversation.\r\n     *\r\n     * @param {number} conversationId Conversation Id to load.\r\n     * @param {number} userId User of the conversation. Only if there is no conversationId.\r\n     * @param {number} [messageId] Message to scroll after loading the discussion. Used when searching.\r\n     */\r\n    gotoConversation(conversationId: number, userId?: number, messageId?: number): void {\r\n        this.selectedConversationId = conversationId;\r\n        this.selectedUserId = userId;\r\n\r\n        const params = {\r\n            conversationId: conversationId,\r\n            userId: userId\r\n        };\r\n        if (messageId) {\r\n            params['message'] = messageId;\r\n        }\r\n        this.splitviewCtrl.push('AddonMessagesDiscussionPage', params);\r\n    }\r\n\r\n    /**\r\n     * Navigate to message settings.\r\n     */\r\n    gotoSettings(): void {\r\n        this.splitviewCtrl.push('AddonMessagesSettingsPage');\r\n    }\r\n\r\n    /**\r\n     * Function to load more conversations.\r\n     *\r\n     * @param {any} option The option to fetch data for.\r\n     * @param {any} [infiniteComplete] Infinite scroll complete function. Only used from core-infinite-loading.\r\n     * @return {Promise<any>} Resolved when done.\r\n     */\r\n    loadMoreConversations(option: any, infiniteComplete?: any): Promise<any> {\r\n        return this.fetchDataForOption(option, true).catch((error) => {\r\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\r\n            option.loadMoreError = true;\r\n        }).finally(() => {\r\n            infiniteComplete && infiniteComplete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load offline messages into the conversations.\r\n     *\r\n     * @param {any} option The option where the messages should be loaded.\r\n     * @param {any[]} messages Offline messages.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected loadOfflineMessages(option: any, messages: any[]): Promise<any> {\r\n        const promises = [];\r\n\r\n        messages.forEach((message) => {\r\n            if (message.conversationid) {\r\n                // It's an existing conversation. Search it in the current option.\r\n                let conversation = this.findConversation(message.conversationid, undefined, option);\r\n\r\n                if (conversation) {\r\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\r\n                    if (typeof conversation.lastmessage === 'undefined' || conversation.lastmessage === null ||\r\n                            !conversation.lastmessagepending || conversation.lastmessagedate <= message.timecreated / 1000) {\r\n\r\n                        this.addLastOfflineMessage(conversation, message);\r\n                    }\r\n                } else {\r\n                    // Conversation not found, it could be an old one or the message could belong to another option.\r\n                    conversation = message.conversation || {};\r\n                    conversation.id = message.conversationid;\r\n\r\n                    if (this.getConversationOption(conversation) == option) {\r\n                        // Message belongs to current option, add the conversation.\r\n                        this.addLastOfflineMessage(conversation, message);\r\n                        this.addOfflineConversation(conversation);\r\n                    }\r\n                }\r\n            } else if (option == this.individual) {\r\n                // It's a new conversation. Check if we already created it (there is more than one message for the same user).\r\n                const conversation = this.findConversation(undefined, message.touserid, option);\r\n\r\n                message.text = message.smallmessage;\r\n\r\n                if (conversation) {\r\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\r\n                    if (conversation.lastmessagedate <= message.timecreated / 1000) {\r\n                        this.addLastOfflineMessage(conversation, message);\r\n                    }\r\n                } else {\r\n                    // Get the user data and create a new conversation if it belongs to the current option.\r\n                    promises.push(this.userProvider.getProfile(message.touserid, undefined, true).catch(() => {\r\n                        // User not found.\r\n                    }).then((user) => {\r\n                        const conversation = {\r\n                            userid: message.touserid,\r\n                            name: user ? user.fullname : String(message.touserid),\r\n                            imageurl: user ? user.profileimageurl : '',\r\n                            type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL\r\n                        };\r\n\r\n                        this.addLastOfflineMessage(conversation, message);\r\n                        this.addOfflineConversation(conversation);\r\n                    }));\r\n                }\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Add an offline conversation into the right list of conversations.\r\n     *\r\n     * @param {any} conversation Offline conversation to add.\r\n     */\r\n    protected addOfflineConversation(conversation: any): void {\r\n        const option = this.getConversationOption(conversation);\r\n        option.conversations.unshift(conversation);\r\n    }\r\n\r\n    /**\r\n     * Add a last offline message into a conversation.\r\n     *\r\n     * @param {any} conversation Conversation where to put the last message.\r\n     * @param {any} message Offline message to add.\r\n     */\r\n    protected addLastOfflineMessage(conversation: any, message: any): void {\r\n        conversation.lastmessage = message.text;\r\n        conversation.lastmessagedate = message.timecreated / 1000;\r\n        conversation.lastmessagepending = true;\r\n        conversation.sentfromcurrentuser = true;\r\n    }\r\n\r\n    /**\r\n     * Given a conversation, return its option (favourites, group, individual).\r\n     *\r\n     * @param {any} conversation Conversation to check.\r\n     * @return {any} Option object.\r\n     */\r\n    protected getConversationOption(conversation: any): any {\r\n        if (conversation.isfavourite) {\r\n            return this.favourites;\r\n        } else if (conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\r\n            return this.group;\r\n        } else {\r\n            return this.individual;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param {any} [refresher] Refresher.\r\n     * @param {booleam} [refreshUnreadCounts=true] Whether to refresh unread counts.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    refreshData(refresher?: any, refreshUnreadCounts: boolean = true): Promise<any> {\r\n        // Don't invalidate conversations and so, they always try to get latest data.\r\n        const promises = [\r\n            this.messagesProvider.invalidateContactRequestsCountCache()\r\n        ];\r\n\r\n        return this.utils.allPromises(promises).finally(() => {\r\n            return this.fetchData(refreshUnreadCounts).finally(() => {\r\n                if (refresher) {\r\n                    refresher.complete();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toogle the visibility of an option (expand/collapse).\r\n     *\r\n     * @param {any} option The option to expand/collapse.\r\n     */\r\n    toggle(option: any): void {\r\n        if (option.expanded) {\r\n            // Already expanded, close it.\r\n            option.expanded = false;\r\n            this.loadCurrentListElement();\r\n        } else {\r\n            this.expandOption(option).catch((error) => {\r\n                this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expand a certain option.\r\n     *\r\n     * @param {any} option The option to expand.\r\n     * @param {booleam} [refreshUnreadCounts=true] Whether to refresh unread counts.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected expandOption(option: any, refreshUnreadCounts: boolean = true): Promise<any> {\r\n        // Collapse all and expand the right one.\r\n        this.favourites.expanded = false;\r\n        this.group.expanded = false;\r\n        this.individual.expanded = false;\r\n\r\n        option.expanded = true;\r\n        option.loading = true;\r\n\r\n        return this.fetchDataForOption(option, false, refreshUnreadCounts).then(() => {\r\n            this.loadCurrentListElement();\r\n        }).catch((error) => {\r\n            option.expanded = false;\r\n\r\n            return Promise.reject(error);\r\n        }).finally(() => {\r\n            option.loading = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load the current list element based on the expanded list.\r\n     */\r\n    protected loadCurrentListElement(): void {\r\n        if (this.favourites.expanded) {\r\n            this.currentListEl = this.favListEl && this.favListEl.nativeElement;\r\n        } else if (this.group.expanded) {\r\n            this.currentListEl = this.groupListEl && this.groupListEl.nativeElement;\r\n        } else if (this.individual.expanded) {\r\n            this.currentListEl = this.indListEl && this.indListEl.nativeElement;\r\n        } else {\r\n            this.currentListEl = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate to the search page.\r\n     */\r\n    gotoSearch(): void {\r\n        this.navCtrl.push('AddonMessagesSearchPage');\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.newMessagesObserver && this.newMessagesObserver.off();\r\n        this.appResumeSubscription && this.appResumeSubscription.unsubscribe();\r\n        this.pushObserver && this.pushObserver.unsubscribe();\r\n        this.readChangedObserver && this.readChangedObserver.off();\r\n        this.cronObserver && this.cronObserver.off();\r\n        this.openConversationObserver && this.openConversationObserver.off();\r\n        this.updateConversationListObserver && this.updateConversationListObserver.off();\r\n        this.contactRequestsCountObserver && this.contactRequestsCountObserver.off();\r\n        this.memberInfoObserver && this.memberInfoObserver.off();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/group-conversations/group-conversations.ts"],"sourceRoot":""}